import { XMLBuilderCreateOptions, ExpandObject, XMLBuilder, WriterOptions, XMLSerializedValue, XMLBuilderCB, XMLBuilderCBCreateOptions } from './interfaces';
import { Node } from '@oozcitak/dom/lib/dom/interfaces';
/**
 * Wraps a DOM node for use with XML builder with default options.
 *
 * @param node - DOM node
 *
 * @returns an XML builder
 */
export declare function builder(node: Node): XMLBuilder;
/**
 * Wraps an array of DOM nodes for use with XML builder with default options.
 *
 * @param nodes - an array of DOM nodes
 *
 * @returns an array of XML builders
 */
export declare function builder(nodes: Node[]): XMLBuilder[];
/**
 * Wraps a DOM node for use with XML builder with the given options.
 *
 * @param options - builder options
 * @param node - DOM node
 *
 * @returns an XML builder
 */
export declare function builder(options: XMLBuilderCreateOptions, node: Node): XMLBuilder;
/**
 * Wraps an array of DOM nodes for use with XML builder with the given options.
 *
 * @param options - builder options
 * @param nodes - an array of DOM nodes
 *
 * @returns an array of XML builders
 */
export declare function builder(options: XMLBuilderCreateOptions, nodes: Node[]): XMLBuilder[];
/**
 * Creates an XML document without any child nodes.
 *
 * @returns document node
 */
export declare function create(): XMLBuilder;
/**
 * Creates an XML document without any child nodes with the given options.
 *
 * @param options - builder options
 *
 * @returns document node
 */
export declare function create(options: XMLBuilderCreateOptions): XMLBuilder;
/**
 * Creates an XML document by parsing the given `contents`.
 *
 * @param contents - a string containing an XML document in either XML or JSON
 * format or a JS object representing nodes to insert
 *
 * @returns document node
 */
export declare function create(contents: string | ExpandObject): XMLBuilder;
/**
 * Creates an XML document.
 *
 * @param options - builder options
 * @param contents - a string containing an XML document in either XML or JSON
 * format or a JS object representing nodes to insert
 *
 * @returns document node
 */
export declare function create(options: XMLBuilderCreateOptions, contents: string | ExpandObject): XMLBuilder;
/**
 * Creates a new document fragment without any child nodes.
 *
 * @returns document fragment node
 */
export declare function fragment(): XMLBuilder;
/**
 * Creates a new document fragment with the given options.
 *
 * @param options - builder options
 *
 * @returns document fragment node
 */
export declare function fragment(options: XMLBuilderCreateOptions): XMLBuilder;
/**
 * Creates a new document fragment by parsing the given `contents`.
 *
 * @param contents - a string containing an XML fragment in either XML or JSON
 * format or a JS object representing nodes to insert
 *
 * @returns document fragment node
 */
export declare function fragment(contents: string | ExpandObject): XMLBuilder;
/**
 * Creates a new document fragment.
 *
 * @param options - builder options
 * @param contents - a string containing an XML fragment in either XML or JSON
 * format or a JS object representing nodes to insert
 *
 * @returns document fragment node
 */
export declare function fragment(options: XMLBuilderCreateOptions, contents: string | ExpandObject): XMLBuilder;
/**
 * Parses an XML document with the default options and converts it to the default
 * output format.
 *
 * @param contents - a string containing an XML document in either XML or JSON
 * format or a JS object representing nodes to insert
 *
 * @returns document node
 */
export declare function convert(contents: string | ExpandObject): XMLSerializedValue;
/**
 * Parses an XML document with the given options and converts it to the default
 * output format.
 *
 * @param builderOptions - builder options
 * @param contents - a string containing an XML document in either XML or JSON
 * format or a JS object representing nodes to insert
 *
 * @returns document node
 */
export declare function convert(builderOptions: XMLBuilderCreateOptions, contents: string | ExpandObject): XMLSerializedValue;
/**
 * Parses an XML document with the default options and converts it to the given
 * format.
 *
 * @param contents - a string containing an XML document in either XML or JSON
 * format or a JS object representing nodes to insert
 * @param convertOptions - convert options
 *
 * @returns document node
 */
export declare function convert(contents: string | ExpandObject, convertOptions: WriterOptions): XMLSerializedValue;
/**
 * Parses an XML document with the given options and converts it to the given
 * format.
 *
 * @param builderOptions - builder options
 * @param contents - a string containing an XML document in either XML or JSON
 * format or a JS object representing nodes to insert
 * @param convertOptions - convert options
 *
 * @returns document node
 */
export declare function convert(builderOptions: XMLBuilderCreateOptions, contents: string | ExpandObject, convertOptions: WriterOptions): XMLSerializedValue;
/**
 * Creates an XML builder which serializes the document in chunks.
 *
 * @param options - callback builder options
 *
 * @returns callback builder
 */
export declare function createCB(options: XMLBuilderCBCreateOptions): XMLBuilderCB;
/**
 * Creates an XML builder which serializes the fragment in chunks.
 *
 * @param options - callback builder options
 *
 * @returns callback builder
 */
export declare function fragmentCB(options: XMLBuilderCBCreateOptions): XMLBuilderCB;
